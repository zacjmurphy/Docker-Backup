# Options:
# run - will run a single time per run of main.py (mainly useful for testing with dry_run)
# hourly(XX)
#   Examples: hourly(00) or hourly(18) - Will perform the action every hour at the specified time
# daily(XX:XX)
#  Examples: daily(12:23) or daily(18:15) - Will perform the action every day at the specified time
#  Examples: daily(10:18|12:23) - Will perform the action every day at the specified times
# weekly(day_of_week@XX:XX)
#   Examples: weekly(monday@12:00) or weekly(monday@18:15) - Will perform the action on the specified day of the week at the specified time
#   Examples: weekly(monday@12:23)
# monthly(day_of_month@XX:XX)
#   Examples: monthly(15@12:00) or monthly(15@18:15) - Will perform the action on the specified day of the month at the specified time
# cron(<cron_expression>)
#   Examples: cron(0 0 * * *) - Will perform the action every day at midnight
#   Examples: cron(*/5 * * * *) - Will perform the action every 5 minutes
#   Examples: cron(0 */3 * * *) - Will perform the action every 3rd hour
#   Please visit https://crontab.guru/ for more information on cron expressions
# Note: You cannot use both cron and human readable expressions in the same schedule

# If using the scripts through crontab or another scheduler, I would not recommend using the schedule w/in the config.
# The schedule is intended for use with Docker. If you want to use the schedule w/in the config, you will need to run the main.py script in the background.
# Schedule only supports the following options: hourly, daily, weekly, monthly, all
schedule:
  border_replacerr: cron(0 0 * * *)
  health_checkarr: cron(0 */1 * * *)
  labelarr:
  nohl:
  sync_gdrive: cron(0 0 * * *)
  poster_cleanarr: daily(05:00)
  poster_renamerr: cron(0 0 * * *)
  renameinatorr:
  unmatched_assets: cron(0 0 * * *)
  upgradinatorr: daily(00:01)
  nohl_bash:
  jduparr:

instances:
  radarr:
    radarr:
      api: <RADARR API>
      url: http://<DEVICE IP>:7878
  sonarr:
    sonarr:
      api: <SONARR API>
      url: http://<DEVICE IP>:8989
  plex:
    plex:
      api: <PLEX API>
      url: http://<DEVICE IP>:32400

discord:
  # Discord notifications:
  # You can use either Notifiarr or Discord's webhook
  # Notifiarr:
  # Use Notifiarr Passthrough
  # Use channel ID so notifiarr knows what channel to send the message to
  # Discord Webhook:
  # Use Discord's webhook
  # Channel ID not used
  notifiarr_webhook:
  # Main is used for version notifications
  main:
    discord_webhook:
    channel_id:
  renameinatorr:
    # Will notify items that have been renamed
    discord_webhook:
    channel_id:
  upgradinatorr:
    # Will notify if an upgrade has been found
    discord_webhook:
    channel_id:
  poster_renamerr:
    # Note: It is recommended for a fresh run to not use a notifications channel, as it will spam the channel with all the matched assets
    discord_webhook:
    channel_id:
  nohl:
    # Will notify if non-hardlinked files are found/searched for
    discord_webhook:
    channel_id:
  queinatorr:
    # Will notify if a torrent/queue item has been handled
    discord_webhook:
    channel_id:
  labelarr:
    # Will notify if a label has been added/removed to a movie or series
    discord_webhook:
    channel_id:
  nohl_bash:
    # Will notify if a non-hardlinked file has been found
    discord_webhook:
    channel_id:
  jduparr:
    # Will notify if a duplicate file has been found and relinked
    discord_webhook:
    channel_id:

sync_gdrive:
  # THIS SCRIPT SYNCS GDRIVE TO A LOCAL FOLDER. ANYTHING UNIQUE IN THE FOLDER WILL BE DELETED.
  # -> You can use client_id, client_secret, and token to authenticate, or you can use gdrive_sa_location to use a service account.
  # DRAZZILB GDRIVE ID: 1VeeQ_frBFpp6AZLimaJSSr0Qsrl6Tb7z
  # Below are others that have been shared around Discord. If you have your own and would like to share it please contact me.
  # This script is meant to be used in conjunction with kometa, however, it can be used on its own.
  # This is a script base of this one: https://discord.com/channels/492590071455940612/1124032073557086258/1126226814629576858
  log_level: info # debug, info, warning, error, critical
  # Client ID for rclone usually ends with .apps.googleusercontent.com
  client_id: <CLIENT ID>
  # Client Secret for rclone, usually starts with GOCSPX-
  client_secret: <CLIENT SECRET>
  # The token for rclone, this is the output of rclone config dump that needs to run manually
  # Token looks like this: { "access_token": "value", "token_type": "Bearer", "refresh_token": "value", "expiry": "value" }
  # NOTE: Include the curly braces
  token: { "access_token": "value", "token_type": "Bearer", "refresh_token": "value", "expiry": "value" }
  # The location of your rclone service account file (JSON)
  gdrive_sa_location: /config/rclone_sa.json
  gdrive_sync: # example of multiple gdrive_id's with multiple sync_locations as objects, we have deprecated gdrive_id and sync_location so please use this instead
      # id: The ID of the folder you want to sync from
      # location: Where you want to sync the posters to
    - id: 1oBzEOXXrTHGq6sUY_4RMtzMTt4VHyeJp
      location: /posters/chrisdc
    - id: 1VeeQ_frBFpp6AZLimaJSSr0Qsrl6Tb7z
      location: /posters/drazz
    - id: 1G77TLQvgs_R7HdMWkMcwHL6vd_96cMp7
      location: /posters/quafley
    - id: 1Xg9Huh7THDbmjeanW0KyRbEm6mGn_jm8
      location: /posters/bz
    - id: 1wrSru-46iIN1iqCl2Cjhj5ofdazPgbsz
      location: /posters/dsaq
    - id: 1YEuS1pulJAfhKm4L8U9z5-EMtGl-d2s7
      location: /posters/solen
    - id: 1zWY-ORtJkOLcQChV--oHquxW3JCow1zm
      location: /posters/solens-collection
    - id: 1bBbK_3JeXCy3ElqTwkFHaNoNxYgqtLug
      location: /posters/stupifierr
    - id: 1KnwxzwBUQzQyKF1e24q_wlFqcER9xYHM
      location: /posters/sahara
    - id: 1alseEnUBjH6CjXh77b5L4R-ZDGdtOMFr
      location: /posters/lioncitygaming
    - id: 1ZfvUgN0qz4lJYkC_iMRjhH-fZ0rDN_Yu
      location: /posters/majorgiant
    - id: 15sNlcFZmeDox2OQJyGjVxRwtigtd82Ru
      location: /posters/majorgiant-collection
    - id: 1LIVG1RbTEd7tTJMbzZr7Zak05XznLFia
      location: /posters/overbook874
    - id: 1aRngLdC9yO93gvSrTI2LQ_I9BSoGD-7o
      location: /posters/iamspartacus
    - id: 1-WhCVwRLfV6hxyKF7W5IuzIHIYicCdAv
      location: /posters/iamspartacus-collection
    - id: 1wOhY88zc0wdQU-QQmhm4FzHL9QiCQnpu
      location: /posters/zarox

poster_renamerr:
  # This script will rename your posters to match kometa's naming scheme from TPDB's naming utilizing Radarr/Sonarr as a source.
  #
  # NOTE: If you're planning to run border_replacerr and/or sync_posters it will appear that this script has hung. It's simply waiting
  # for the other scripts to finish. You can monitor progress and/or actions on their respective logs.
  # Logging for poster_renamer and border_replacerr scripts happens mostly at the end of the run, so you may not see anything until the end.
  # sync_posters is a bit more verbose as it utilizes the rclone sync command.
  log_level: info
  dry_run: false
  sync_posters: true # <- This will run sync_gdrive before renaming
  action_type: copy # <- Options: copy, move
  asset_folders: true # <- This will copy the folder structure of the source_dir to the destination_dir, this MUST be the same as you use in kometa
  print_only_renames: false # <- This will print the renames to the log, but will not actually rename anything
  # This will integrate border_replacer with poster_renamerr, set this to true if you want to use them at the same time (no need to schedule border_replacer)
  # Note: This will create a tmp dir in your output directory for border_replacer to use and for poster_renamer to have accurate account of what has been added
  # Note: All of border_replacer's settings will be used, except for the input_dir and output_dir
  border_replacerr: true
  # Libraries are ONLY used for collections
  library_names:
    - Movies
    - TV Shows
  # The order from lowest to highest priority
  # The order is 100% personal preference
  source_dirs:
    - /posters/solens-collection
    - /posters/iamspartacus-collection
    - /posters/majorgiant-collection
    - /posters/overbook874
    - /posters/stupifierr
    - /posters/zarox
    - /posters/sahara
    - /posters/dsaq
    - /posters/iamspartacus
    - /posters/lioncitygaming
    - /posters/majorgiant
    - /posters/bz
    - /posters/quafley
    - /posters/solen
    - /posters/drazz
    - /posters/chrisdc
  destination_dir: /assets
  instances:
    - plex
    - radarr
    - sonarr

border_replacerr:
  # This script replaces the border on the posters or removes the border
  # WARNING: If you have overlays that are carefully position and choose to remove the border around the poster, the overlay
  # will not be in the correct position. This is because the overlay is positioned based on the border width.
  # Colors: https://www.w3schools.com/colors/colors_picker.asp
  log_level: info
  dry_run: false
  source_dirs:  # <--- Not used if using with poster_renamerr only used if running border_replacer by itself
    - /posters
  destination_dir: /assets/ # <---- Not used if using with poster_renamerr only used if running border_replacer by itself
  # If you want to adjust the border width (not all MM2K posters are 25px borders some are 26-27)
  border_width: 26
  # skip - This will skip border replacement until the next schedule/holiday
  skip: false
  # Setting a border color of nothing will remove the border, else it will add the border color
  # Examples: Must include everything from double quotes to double quotes such as "#FF0000"
  # "#FF0000" - Red
  # "#00FF00" - Green
  # "#0000FF" - Blue
  # "#FFA500" - Orange
  # "#FFFF00" - Yellow
  # "#800080" - Purple
  # "#FFC0CB" - Pink
  # "#FFFFFF" - White
  # "#000000" - Black
  # "#808080" - Gray
  # To remove borders set the border_colors to nothing.
  # Example: border_colors:
  border_colors:

unmatched_assets:
  # There is a limitation to how this script works with regards to it matching series assets the
  # main series poster requires seasonal posters to be present. If you have a series that does
  # not have a seasonal poster then it will not match the series poster. If you don't have a season poster
  # your series will appear in the movies section.
  log_level: info
  instances:
    - radarr
    - sonarr
  # Supports both data path as well as base_name of folder path
  # Note: If you use base_name, the name must match exactly just without the "/"
  ignore_root_folders:
  # Libraries are ONLY used for collections
  library_names:
    - Movies
    - TV Shows
  ignore_collections:
  source_dirs:
    - /assets

poster_cleanarr:
  # This script will remove any assets from your kometa asset directory that are not being used by your media.
  # Note: This script will remove things that renamer has put in to the assets directory that do not have a folder in your
  # Media directory and cause a loop. I wouldn't recommend running this script very often (weekly at most, monthly is probably)
  log_level: info
  dry_run: true
  instances:
    - plex
    - radarr
    - sonarr
  # Libraries are ONLY used for collections
  library_names:
    - Movies
    - TV Shows
  ignore_collections:
  # If using poster_renamer with border_replacer, include the tmp folder that border_replacer uses
  source_dirs:
    - /assets

upgradinatorr:
  # A script to upgrade Sonarr/Radarr libraries to the keep in line with trash-guides
  log_level: info
  dry_run: false
  instances:
    radarr:
      count: 10
      tag_name: checked
      unattended: true
    sonarr:
      count: 3
      tag_name: checked
      unattended: true

renameinatorr:
  # This script will rename all series in Sonarr/Radarr to match the naming scheme of the
  # Naming Convention within Radarr/Sonarr. It will also add a tag to the series so that it can be easily
  # identified as having been renamed.
  #
  # Warning: With a large library this script can take a while as it wait's for all API calls to finish before moving on to the next instance
  # Note If you see something along the lines of Unable to move series from '<Insert path/name>'. Try moving files manually: Source and destination can't be the same <insert_path/name>
  # This is normal and you'll even see this error if you perform the same action the script does manually.
  log_level: info
  dry_run: false
  rename_folders: true
  # Tag name and count are optional, if you don't want to use them leave them blank
  # The reason for count and tag is if you want to perform renaming actions in batches or in bulk
  count: 10
  tag_name: renamed
  instances:
    - radarr
    - sonarr

nohl:
  # This script will find all files that are not hardlinked and will process them in radarr
  # and sonarr. This is useful for finding files that are not hardlinked and wish to have 100%
  # hardlinks seeding.
  dry_run: true
  log_level: info
  maximum_searches: 10 # Please keep this number low to avoid bans
  print_files: false # Will not respect excludes for simply printing the files
  instances:
    - radarr
    - sonarr
  paths:
    - /path/to/media/movies
    - /path/to/media/series

queinatorr:
  # This script will move torrents from one category to another in qBittorrent based on
  # the title of the torrent. This is useful for moving torrents from a category that are stuck
  # in a queue due to a missing file or not being an upgrade for existing episode file(s).
  log_level: info
  dry_run: true
  days_to_keep: 14 # The number of days to keep in the pre_import_category prior to moving to the post_import_category
  instances:

labelarr:
  # A script to sync labels between Plex and Radarr/Sonarr
  # Warning: Due to the way that Plex API works, this script can take a while to run with a large library
  dry_run: true
  log_level: info
  instances:

health_checkarr:
  # This script will delete movies and shows from Radarr and Sonarr based on the if they show
  # up in the health check. This is useful for removing movies and shows that have been removed
  # from TMDB or TVDB.
  log_level: info
  dry_run: true
  instances:
    - radarr
    - sonarr

main:
  log_level: info